apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: example-nodejs-template
  title: Example Node.js Template
  description: An example template for the scaffolder that creates a simple Node.js service
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}?ref=main
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: example-python-template
  title: Example Python Template
  description: Um template para criar serviços Python utilizando Django, FastAPI ou Flask
spec:
  owner: user:guest
  type: service

  # Parâmetros que serão exibidos no formulário da interface do Backstage
  parameters:
    - title: Informações do Componente
      required:
        - name
        - framework
      properties:
        name:
          title: Nome
          type: string
          description: Nome único do componente Python
          ui:autofocus: true
          ui:options:
            rows: 1
        framework:
          title: Framework Python
          type: string
          description: Selecione o framework para sua aplicação
          enum:
            - django
            - fastapi
            - flask
    - title: Escolha um Repositório
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Localização do Repositório
          type: string
          description: Endereço do repositório onde o novo projeto será criado
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # Etapas que serão executadas no backend do scaffolder utilizando os parâmetros coletados
  steps:
    # Etapa para buscar a estrutura base do projeto Python, dependendo do framework selecionado
    - id: fetch-base
      name: Buscar Template Base
      action: fetch:template
      input:
        url: ./content/${{ parameters.framework }}
        values:
          name: ${{ parameters.name }}

    # Etapa que publica o conteúdo gerado em um repositório do GitHub
    - id: publish
      name: Publicar no GitHub
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: Este é o projeto ${{ parameters.name }} utilizando ${{ parameters.framework }}
        repoUrl: ${{ parameters.repoUrl }}

    # Etapa que registra o novo componente no catálogo do Backstage
    - id: register
      name: Registrar Componente
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}?ref=main
        catalogInfoPath: '/catalog-info.yaml'

  # Saídas exibidas para o usuário após a execução bem-sucedida do template
  output:
    links:
      - title: Repositório
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Abrir no catálogo
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
---